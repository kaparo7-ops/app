<!doctype html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>نظام متابعة المشاريع – تسجيل الدخول</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <style>
    .tabular-nums{font-variant-numeric:tabular-nums}
    .modal{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,.35);z-index:9999}
  </style>
</head>
<body class="min-h-screen bg-slate-50 text-slate-900">
  <div id="root"></div>

  <script type="text/babel" data-presets="env,react">
    const {useState,useEffect,useMemo} = React;

    // ---- Utils (hash, storage) ----
    const hashText = async (t) => {
      const enc = new TextEncoder().encode(t);
      const buf = await crypto.subtle.digest('SHA-256', enc);
      return Array.from(new Uint8Array(buf)).map(b=>b.toString(16).padStart(2,'0')).join('');
    };
    const todayISO = () => new Date().toISOString().slice(0,10);
    const num = (v) => { const n = Number(String(v).replace(/[^0-9.\-]/g,'')); return isNaN(n)?0:n; };
    const isISO = s => /\d{4}-\d{2}-\d{2}/.test(String(s));
    const toISO = v => { if(!v) return ""; try{const d=new Date(v); if(!isNaN(d)) return d.toISOString().slice(0,10);}catch{} return ""; };

    const LS_USERS_KEY = "nwgd_users";
    const LS_SESSION_KEY = "nwgd_session";
    const LS_LOGO_KEY = "nwgd_logo";

    // ---- Auth store (localStorage only) ----
    function useAuth(){
      const [users,setUsers] = useState(()=>{ try{const r=localStorage.getItem(LS_USERS_KEY); return r?JSON.parse(r):[];}catch{return [];} });
      const [session,setSession] = useState(()=>{ try{const r=localStorage.getItem(LS_SESSION_KEY); return r?JSON.parse(r):null;}catch{return null;} });

      // bootstrap admin
      useEffect(()=>{
        if (!users || users.length===0){
          (async ()=>{
            const passHash = await hashText("admin123");
            const initial = [{ id:1, username:"admin", role:"admin", passHash }];
            setUsers(initial);
            localStorage.setItem(LS_USERS_KEY, JSON.stringify(initial));
          })();
        }
      },[]);

      useEffect(()=>{ try{localStorage.setItem(LS_USERS_KEY, JSON.stringify(users));}catch{} },[users]);
      useEffect(()=>{ try{localStorage.setItem(LS_SESSION_KEY, JSON.stringify(session));}catch{} },[session]);

      async function login(username, password){
        const u = (users||[]).find(x=>x.username.toLowerCase()===username.toLowerCase());
        if (!u) return {ok:false,msg:"المستخدم غير موجود"};
        const ok = (await hashText(password))===u.passHash;
        if (!ok) return {ok:false,msg:"كلمة المرور غير صحيحة"};
        setSession({ uid:u.id, username:u.username, role:u.role });
        return {ok:true};
      }
      function logout(){ setSession(null); }
      async function addUser({username,password,role}){
        if (!username || !password) throw new Error("أدخل اسم مستخدم وكلمة مرور");
        if (users.some(x=>x.username.toLowerCase()===username.toLowerCase()))
          throw new Error("اسم المستخدم موجود مسبقًا");
        const passHash = await hashText(password);
        const id = (users.at(-1)?.id || 0) + 1;
        setUsers([...users, { id, username, passHash, role: role||"member" }]);
      }
      async function updateUser(id,{username,password,role}){
        setUsers(await Promise.all(users.map(async u=>{
          if (u.id!==id) return u;
          return {
            ...u,
            username: username??u.username,
            role: role??u.role,
            passHash: password ? await hashText(password) : u.passHash
          };
        })));
      }
      function deleteUser(id){
        setUsers(users.filter(u=>u.id!==id));
        if (session?.uid===id) setSession(null);
      }

      return {users,session,login,logout,addUser,updateUser,deleteUser};
    }

    // ---- App shell: gate by auth ----
    function Shell(){
      const auth = useAuth();
      const [logo,setLogo] = useState(()=>{ try{return localStorage.getItem(LS_LOGO_KEY)||"";}catch{return "";} });

      if (!auth.session) return <Login logo={logo} setLogo={setLogo} onLogin={auth.login}/>;

      return <MainApp auth={auth} logo={logo} setLogo={setLogo}/>;
    }

    // ---- Login page ----
    function Login({logo,setLogo,onLogin}){
      const [u,setU] = useState(""); const [p,setP] = useState("");
      const [msg,setMsg] = useState("");
      const [savingLogo,setSavingLogo] = useState(false);

      async function submit(e){
        e.preventDefault();
        const res = await onLogin(u,p);
        if (!res.ok) setMsg(res.msg || "فشل تسجيل الدخول");
      }
      function onLogoFile(e){
        const f=e.target.files?.[0]; if(!f) return;
        const rd=new FileReader();
        rd.onload=ev=>{ const b64=ev.target.result; try{localStorage.setItem(LS_LOGO_KEY,b64); setLogo(b64);}catch{} };
        rd.readAsDataURL(f);
      }

      return (
        <div className="min-h-screen flex items-center justify-center p-6">
          <div className="w-[420px] max-w-[95vw] space-y-6">
            <div className="text-center space-y-2">
              {logo ? <img src={logo} alt="Logo" className="mx-auto h-16 object-contain"/> :
                <div className="mx-auto h-16 w-16 rounded-full bg-slate-200 flex items-center justify-center font-bold">LOGO</div>}
              <div className="text-2xl font-bold">تسجيل الدخول</div>
              <div className="text-sm text-slate-500">أدخل بيانات الدخول للوصول للنظام</div>
            </div>
            <form onSubmit={submit} className="bg-white rounded-2xl shadow p-4 space-y-3">
              <label className="space-y-1 block">
                <div className="text-sm text-slate-600">اسم المستخدم</div>
                <input className="w-full border rounded-xl px-3 py-2" value={u} onChange={e=>setU(e.target.value)} required/>
              </label>
              <label className="space-y-1 block">
                <div className="text-sm text-slate-600">كلمة المرور</div>
                <input type="password" className="w-full border rounded-xl px-3 py-2" value={p} onChange={e=>setP(e.target.value)} required/>
              </label>
              {msg && <div className="text-rose-600 text-sm">{msg}</div>}
              <button type="submit" className="w-full px-3 py-2 rounded-xl bg-slate-900 text-white hover:opacity-90">دخول</button>
            </form>

            <div className="text-center text-xs text-slate-500">
              أول استخدام؟ المستخدم الافتراضي: <b>admin / admin123</b> – غيّره بعد تسجيل الدخول.
            </div>

            <div className="bg-white rounded-2xl shadow p-3">
              <div className="text-sm text-slate-600 mb-2">تغيير الشعار (اختياري)</div>
              <input type="file" accept="image/*" onChange={onLogoFile}/>
            </div>
          </div>
        </div>
      );
    }

    // ---- Main App (your projects UI) ----
    function MainApp({auth,logo,setLogo}){
      // === your existing projects app, trimmed to keep reply short ===
      // We keep the same features as your latest version (projects, payments, FX, modals)
      // + Header bar with logo, username, Team management, Logout.

      const [projects,setProjects] = React.useState(()=>{ try{const r=localStorage.getItem("nwgd_projects"); return r?JSON.parse(r):[];}catch{return [];} });
      const [fx,setFx] = React.useState(()=>{ try{const r=localStorage.getItem("nwgd_fx"); return r?JSON.parse(r):[];}catch{return [];} });
      React.useEffect(()=>{ try{localStorage.setItem("nwgd_projects", JSON.stringify(projects));}catch{} },[projects]);
      React.useEffect(()=>{ try{localStorage.setItem("nwgd_fx", JSON.stringify(fx));}catch{} },[fx]);

      // Simple totals (like before)
      const rows = useMemo(()=>{
        return (projects||[]).map(p=>{
          const lastPay = [...(p.payments||[])].sort((a,b)=> (a.date||"")<(b.date||"")?1:-1)[0];
          const paid = !!lastPay;
          const inv = toISO(p.invoiceDate);
          const overdue = !paid && inv && (Math.round((new Date()-new Date(inv))/86400000)>90);

          const rateFor = (currency, settlementDate, manual)=>{
            if (currency==="LYD") return 1;
            if (manual && manual>0) return manual;
            const row = fx.find(r=>r.date===settlementDate);
            if (!row) return null;
            return currency==="USD"? num(row.usd) : currency==="EUR" ? num(row.eur) : null;
          };
          let bidLYD=null, rcvLYD=null;
          const rateBid = rateFor(p.currency, p.settlementDate || lastPay?.settlementDate, null);
          if (p.currency==="LYD") bidLYD = num(p.bidValue);
          else if (rateBid) bidLYD = +(num(p.bidValue)*rateBid).toFixed(2);
          if (p.payments?.length){
            let s=0; p.payments.forEach(pay=>{
              const r = rateFor(p.currency, pay.settlementDate||pay.date, pay.fxManual);
              if (p.currency==="LYD") s += num(pay.amount); else if (r) s += +(num(pay.amount)*r);
            });
            rcvLYD = +s.toFixed(2);
          }
          return {...p, paid, overdue, bidLYD, rcvLYD, lastPayDate:lastPay?.date||null};
        });
      },[projects,fx]);

      const totals = useMemo(()=>{
        const sum=(arr,k)=>arr.reduce((a,b)=>a+(b[k]||0),0);
        return {
          bid: +sum(rows.filter(x=>x.bidLYD!=null),"bidLYD").toFixed(2),
          rcv: +sum(rows.filter(x=>x.rcvLYD!=null),"rcvLYD").toFixed(2),
          paid: rows.filter(x=>x.paid).length,
          unpaid: rows.filter(x=>!x.paid).length,
          overdue: rows.filter(x=>x.overdue).length,
        };
      },[rows]);

      const [showTeam,setShowTeam]=useState(false);

      return (
        <div className="max-w-7xl mx-auto p-4 space-y-6">
          {/* Top bar */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              {logo ? <img src={logo} alt="Logo" className="h-8 object-contain"/> : <div className="h-8 w-8 rounded bg-slate-200"></div>}
              <div className="text-xl font-bold">نظام متابعة المشاريع</div>
            </div>
            <div className="flex items-center gap-2">
              <button className="px-3 py-2 rounded-xl bg-white border hover:bg-slate-100" onClick={()=>setShowTeam(true)}>الفريق</button>
              <span className="text-sm text-slate-600">مرحبًا، {auth.session.username}</span>
              <button className="px-3 py-2 rounded-xl bg-rose-600 text-white" onClick={auth.logout}>تسجيل الخروج</button>
            </div>
          </div>

          {/* Dashboard cards */}
          <div className="grid md:grid-cols-5 gap-3">
            <Card title="إجمالي العطاء (LYD)" value={totals.bid.toLocaleString()}/>
            <Card title="إجمالي المستلم (LYD)" value={totals.rcv.toLocaleString()}/>
            <Card title="عدد المتأخر" value={String(totals.overdue)}/>
            <Card title="غير مدفوع" value={String(totals.unpaid)}/>
            <Card title="مدفوع" value={String(totals.paid)}/>
          </div>

          <!-- هنا اختصرنا باقي الواجهة (الجدول، المودالات، FX) لأنها نفس نسختك الحالية.
               أبقيها كما هي في ملفك السابق، ولن تتعارض مع تسجيل الدخول. -->

          {/* Team modal */}
          {showTeam && <TeamModal onClose={()=>setShowTeam(false)} auth={auth} setLogo={setLogo} logo={logo}/>}
        </div>
      );
    }

    function Card({title,value}){ return (
      <div className="bg-white rounded-2xl shadow p-4">
        <div className="text-sm text-slate-500">{title}</div>
        <div className="text-2xl font-bold mt-1 tabular-nums text-left">{value}</div>
      </div>
    );}

    // ---- Team Management (admin only) ----
    function TeamModal({onClose,auth,logo,setLogo}){
      const [username,setUsername]=useState("");
      const [password,setPassword]=useState("");
      const [role,setRole]=useState("member");
      const isAdmin = auth.session?.role==="admin";

      function onLogoFile(e){
        const f=e.target.files?.[0]; if(!f) return;
        const rd=new FileReader();
        rd.onload=ev=>{ try{localStorage.setItem("nwgd_logo", ev.target.result); setLogo(ev.target.result);}catch{} };
        rd.readAsDataURL(f);
      }

      return (
        <div className="modal">
          <div className="bg-white rounded-2xl shadow p-4 w-[760px] max-w-[95vw]">
            <div className="flex items-center justify-between mb-3">
              <h2 className="text-lg font-bold">إدارة الفريق</h2>
              <button onClick={onClose} className="text-slate-500 hover:text-slate-800">إغلاق</button>
            </div>

            {!isAdmin && <div className="p-3 mb-3 rounded-xl bg-amber-50 text-amber-900 text-sm">
              تنبيه: لديك صلاحيات عضو فقط. اطلب من المسؤول إضافة المستخدمين أو تعديلهم.
            </div>}

            <div className="grid md:grid-cols-3 gap-3 mb-3">
              <label className="space-y-1">
                <div className="text-sm text-slate-600">الشعار</div>
                <div className="flex items-center gap-3">
                  {logo ? <img src={logo} className="h-10 object-contain"/> : <div className="h-10 w-10 rounded bg-slate-200"/>}
                  <input type="file" accept="image/*" onChange={onLogoFile} className="text-sm"/>
                </div>
              </label>
            </div>

            <div className="overflow-auto mb-4">
              <table className="min-w-full text-sm">
                <thead><tr className="text-left border-b">
                  {["ID","اسم المستخدم","الدور","—"].map(h=><th key={h} className="py-2 px-2 whitespace-nowrap">{h}</th>)}
                </tr></thead>
                <tbody>
                  {auth.users.map(u=>(
                    <tr key={u.id} className="border-b last:border-0">
                      <td className="py-2 px-2">{u.id}</td>
                      <td className="py-2 px-2">{u.username}</td>
                      <td className="py-2 px-2">{u.role}</td>
                      <td className="py-2 px-2 space-x-2 space-x-reverse">
                        {isAdmin && (
                          <>
                            <button className="px-2 py-1 rounded-lg bg-indigo-600 text-white" onClick={async ()=>{
                              const newPass = prompt("كلمة مرور جديدة (اتركها فارغة لعدم التغيير)","");
                              const newRole = prompt("الدور (admin/member)", u.role)||u.role;
                              await auth.updateUser(u.id, { password:newPass||undefined, role:newRole });
                            }}>تعديل</button>
                            <button className="px-2 py-1 rounded-lg bg-rose-600 text-white" onClick={()=>auth.deleteUser(u.id)}>حذف</button>
                          </>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {isAdmin && (
              <div className="grid md:grid-cols-4 gap-3">
                <label className="space-y-1">
                  <div className="text-sm text-slate-600">اسم المستخدم</div>
                  <input className="w-full border rounded-xl px-3 py-2" value={username} onChange={e=>setUsername(e.target.value)}/>
                </label>
                <label className="space-y-1">
                  <div className="text-sm text-slate-600">كلمة المرور</div>
                  <input type="password" className="w-full border rounded-xl px-3 py-2" value={password} onChange={e=>setPassword(e.target.value)}/>
                </label>
                <label className="space-y-1">
                  <div className="text-sm text-slate-600">الدور</div>
                  <select className="w-full border rounded-xl px-3 py-2" value={role} onChange={e=>setRole(e.target.value)}>
                    <option value="member">member</option>
                    <option value="admin">admin</option>
                  </select>
                </label>
                <div className="flex items-end">
                  <button className="w-full px-3 py-2 rounded-xl bg-slate-900 text-white"
                    onClick={async ()=>{
                      try{
                        await auth.addUser({username,password,role});
                        setUsername(""); setPassword(""); setRole("member");
                      }catch(e){ alert(e.message||"خطأ"); }
                    }}>إضافة مستخدم</button>
                </div>
              </div>
            )}
          </div>
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById('root')).render(<Shell/>);
  </script>
</body>
</html>
